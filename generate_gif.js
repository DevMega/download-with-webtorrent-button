var Nightmare = require('nightmare')

function waitPercent (n) {
  return document.querySelector('a span').innerText.endsWith(n + '%')
}

new Nightmare({waitTimeout: 300000, show: true, backgroundColor: '#FFF', transparent: false})
  .viewport(300, 200)
  .goto('https://wmhilton.com/download-with-webtorrent-button/')
  .screenshot('screenshots/00.png', {x: 0, y: 0, width: 210, height: 64})
  .click('a')
  .wait('a.downloading')
  .screenshot('screenshots/01.png', {x: 0, y: 0, width: 210, height: 64})
  .wait(waitPercent, 10)
  .screenshot('screenshots/02.png', {x: 0, y: 0, width: 210, height: 64})
  .wait(waitPercent, 20)
  .screenshot('screenshots/03.png', {x: 0, y: 0, width: 210, height: 64})
  .wait(waitPercent, 30)
  .screenshot('screenshots/04.png', {x: 0, y: 0, width: 210, height: 64})
  .wait(waitPercent, 40)
  .screenshot('screenshots/05.png', {x: 0, y: 0, width: 210, height: 64})
  .wait(waitPercent, 50)
  .screenshot('screenshots/06.png', {x: 0, y: 0, width: 210, height: 64})
  .wait(waitPercent, 60)
  .screenshot('screenshots/07.png', {x: 0, y: 0, width: 210, height: 64})
  .wait(waitPercent, 70)
  .screenshot('screenshots/08.png', {x: 0, y: 0, width: 210, height: 64})
  .wait(waitPercent, 80)
  .screenshot('screenshots/09.png', {x: 0, y: 0, width: 210, height: 64})
  .wait(waitPercent, 90)
  .screenshot('screenshots/10.png', {x: 0, y: 0, width: 210, height: 64})
  .wait('a.ready')
  .screenshot('screenshots/11.png', {x: 0, y: 0, width: 210, height: 64})
  .click('a')
  .wait('a.seeding')
  .wait(1000)
  .screenshot('screenshots/12.png', {x: 0, y: 0, width: 210, height: 64})
  .end()
  .then(() => {
    console.log('Generating animated gif')
    var fs = require('fs')
    var GIFEncoder = require('gifencoder')
    var encoder = new GIFEncoder(210, 64)
    var pngFileStream = require('png-file-stream')
    pngFileStream('screenshots/*.png')
      .pipe(encoder.createWriteStream({ repeat: -1, delay: 1000, quality: 10 }))
      .pipe(fs.createWriteStream('dist/animated.gif'))
  })
  .catch(err => console.log)
